# 随写

## OCCT

### 关于Edge

存在以下两类特殊的边，它们确实可以被遍历，但是无法被 `BRep_Tool::Curve(edge, first, last)`曲线化，因为它们没有对应的3D形状，叫做没有几何形状的拓扑边(Topological edge without a geometric entity)。

- 缝合边(seam edge)，同一个面使用两次的边(同一个面上有2个参数曲线)
- 退化边(degenerated edge)，位于曲面奇点位置，在三维空间中为一个点

例如，对球面遍历取边，获得到三条边，其中两条边分别为缝合边和退化边，`BRep_Tool::Curve(edge, first, last)`都会返回 `nullptr`。

## Open Inventor

### 关于SoSelection
`SoSelection`进行选择时，其根本原理是将选中物体的path的保存起来，所以主动调用select/deselect都是通过各种方法获得path加以储存。故尽管是同一物体，但如果他是由多个形状组成，由于每一个形状都能被单独pick形成path，所以点击同一物体的不同地方会将不同的path保存起来，不是直觉上的，保存选中物体的概念，这个需要注意。

### 关于SbPlane
`SbPlane`的`getDistanceFromOrigin()`是带方向的距离。顺着法线方向的移动为正，反过来则为负，而平面方程`Ax+By+Cz+D=0`中的`D`则刚好是这个距离的相反数，因为这个距离表达其实是`Ax+By+Cz=-D`，方程的右侧即为`getDistanceFromOrigin()`返回的值。
```python
class CapCube:
def __init__(self, plane, target: coin.SoNode, viewport, handler: coin.SoShapeHints):
self.plane = plane  # SbPlane
self.normal = plane.getNormal()
self.dist = plane.getDistanceFromOrigin()
self.viewport = viewport

self.target = target
self.handler = handler

def stencilBuffer(self):
eq = GLdouble_4(*self.normal, -self.dist)
glClipPlane(GL_CLIP_PLANE0, eq)
glEnable(GL_CLIP_PLANE0)

glClear(GL_STENCIL_BUFFER_BIT)
glEnable(GL_STENCIL_TEST)

glDepthMask(GL_FALSE)
glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE)

glEnable(GL_CULL_FACE)
glEnable(GL_DEPTH_TEST)

query = GLuint()
glGenQueries(1, query)
glBeginQuery(GL_SAMPLES_PASSED, query)

# increase stencil-buffer
glStencilFunc(GL_ALWAYS, 1, 0xff)
glStencilOp(GL_KEEP, GL_KEEP, GL_INCR)
glCullFace(GL_FRONT)

# self.handler.vertexOrdering = coin.SoShapeHints.CLOCKWISE
action = coin.SoGLRenderAction(self.viewport)
action.apply(self.target)

glEndQuery(GL_SAMPLES_PASSED)

result = GLuint()
glGetQueryObjectuiv(query, GL_QUERY_RESULT, result)

glDeleteQueries(1, query)

if result.value == 0:
print("物体被完全遮挡")
else:
print("物体未被完全遮挡，通过深度测试的样本数量为：", result.value)

# glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE)
# glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE)
# decrease the stencil buffer
glStencilFunc(GL_ALWAYS, 1, 0xff)
glStencilOp(GL_KEEP, GL_KEEP, GL_DECR)
glCullFace(GL_BACK)

# self.handler.vertexOrdering = coin.SoShapeHints.COUNTERCLOCKWISE
action.apply(self.target)

# Draw the capped face

glDepthMask(GL_TRUE)
glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE)

glDisable(GL_CULL_FACE)
glDisable(GL_CLIP_PLANE0)

glEnable(GL_DEPTH_TEST)

glStencilFunc(GL_EQUAL, 1, 0xff)
glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP)

self.drawCube(0.2, 0.8, 0.8)

glDisable(GL_STENCIL_TEST)
glClear(GL_STENCIL_BUFFER_BIT)

self.drawCube(0.1, 0.1, 0.1, True)

def drawCube(self, r=0.2, g=0.2, b=0.2, onlyWires=False):
root = coin.SoSeparator()

cubeSH = coin.SoShapeHints()
cubeSH.vertexOrdering = coin.SoShapeHints.COUNTERCLOCKWISE
cubeSH.shapeType = coin.SoShapeHints.SOLID
root.addChild(cubeSH)

cubeMaterial = coin.SoMaterial()
cubeMaterial.diffuseColor = r, g, b
root.addChild(cubeMaterial)

if onlyWires:
cubeType = coin.SoDrawStyle()
cubeType.style = coin.SoDrawStyle.LINES
root.addChild(cubeType)

cubeTransform = coin.SoTransform()
cubeTransform.translation = 0, 0, 0.7
root.addChild(cubeTransform)

cube = coin.SoCube()
cube.height = 1.0
cube.width = 1.0
cube.depth = 1.0
root.addChild(cube)

action = coin.SoGLRenderAction(self.viewport)
action.apply(root)

def setCull(self, back=True):
pass


def myCallbackRoutine(cap, action):
global handled
if not action.isOfType(coin.SoGLRenderAction.getClassTypeId()):
return
cap.stencilBuffer()


def main():
myWindow = soqt.SoQt.init(sys.argv[0])
viewer = soqt.SoQtExaminerViewer(myWindow)

root = coin.SoSeparator()

cubeRoot = coin.SoSeparator()

cubeSH = coin.SoShapeHints()
cubeSH.vertexOrdering = coin.SoShapeHints.COUNTERCLOCKWISE
cubeSH.shapeType = coin.SoShapeHints.SOLID
cubeRoot.addChild(cubeSH)

cubeMaterial = coin.SoMaterial()
cubeMaterial.diffuseColor = 0.6, 0.1, 0.1
cubeRoot.addChild(cubeMaterial)

cube = coin.SoCone()
cube.height = 0.8
cube.bottomRadius = 0.4
# cube.height = .8
# cube.width = .8
# cube.depth = .8
cubeRoot.addChild(cube)

plane = coin.SbPlane(coin.SbVec3f(0, 0, 1), coin.SbVec3f(0, 0, 0.2))
cap = CapCube(plane, cubeRoot, viewer.getViewportRegion(), cubeSH)
# cap = CapPlane(plane, cube)
myCallback = coin.SoCallback()
myCallback.setCallback(myCallbackRoutine, cap)

capPlane = coin.SoClipPlane()
capPlane.plane = plane

# root += myCallback
root += capPlane, cubeRoot, myCallback

viewer.setSceneGraph(root)
viewer.setBackgroundColor(coin.SbColor(.5, .5, .5))
viewer.setTitle("Examiner Viewer")
viewer.toggleCameraType()
viewer.viewAll()
viewer.show()
soqt.SoQt.show(myWindow)
soqt.SoQt.mainLoop()
```

## 数据结构

### 位掩码(Bit Mask)

位掩码，别称位字段(Bit field)，是一种高效的数据结构，核心思想是使用一个整数的每一位来表示不同的状态，从而在一个整数中存储多个布尔值。
位掩码一般与枚举搭配使用，具体进行操作时，只需要灵活使用位与 `&`、位或 `|`以及异或 `^`就能轻松实现状态的查询与设置。需要注意的是，状态枚举的设置与一般的设置存在一定区别，位掩码状态枚举需要手动指定状态值，如下所示：

```
enum Status {
STATUS_A = 1 << 0,  // 0001
STATUS_B = 1 << 1,  // 0010
STATUS_C = 1 << 2,  // 0100
STATUS_D = 1 << 3   // 1000
};
```

在 `Win C++`中，由于 `int`整型数只有32位，位掩码最多只能表达32种状态，就算换成 `long long`类型，最高可表达的状态也只能扩展到64位，一旦超过这个数量，就只能使用更加通用的数据结构进行解决。

### 八叉树(Octree)

八叉树用于3D空间中的快速查找，在很多情况下非常有用。

## 语言基础

### 关键字
- `constexpr`：constexpr是用于指示常量表达式的关键字，它的值在编译期间就已知，所有的constexpr对象都是`const`对象，但不是所有的const对象都是constexpr对象。constexpr还可用于函数，这样的函数在编译时就能计算出结果，只有在除了typedef和静态元素，只有return语句，并且参数和返回值必须是字面值类型的情况下，编译器才会接受constexpr函数。
- `noexcept`：noexcept是一个用于声明函数不应该抛出异常的关键字，用于编译器对该处进行优化，但其本身无法阻止异常的抛出，只用作标记，若函数仍抛出异常，那么程序就会调用`std::terminate()`终止，因为这不符合规定的正常运行流程。


### 基础重写
- 对于二元操作符`+`等的重写，一般使用的规则是`T operator+(T lhs, const T& rhs);`，这是因为操作符左侧往往是需要被修改的，如`a = a + b`或者`a += b`，这是一种公认的习惯，操作符左侧使用引用会导致值被修改两次，与期望不符。

### 智能指针
- `std::unique_ptr<T>`：所有权独占，所以访问时不能直接返回unique_ptr自身，一般用在类自身的指针成员变量上，即指针所指对象的生命周期与所属类相同，由于unique_ptr的存在，无需在析构函数中手动对改指针成员变量进行内存管理。
- `std::shared_ptr<T>`：待续
