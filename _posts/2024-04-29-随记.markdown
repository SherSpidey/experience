---
layout: post
title:  "随记"
date:   2024-04-29
categories: learn
---

# 随记

## OCCT

### 关于Edge

存在以下两类特殊的边，它们确实可以被遍历，但是无法被 `BRep_Tool::Curve(edge, first, last)`曲线化，因为它们没有对应的3D形状，叫做没有几何形状的拓扑边(Topological edge without a geometric entity)。

- 缝合边(seam edge)，同一个面使用两次的边(同一个面上有2个参数曲线)
- 退化边(degenerated edge)，位于曲面奇点位置，在三维空间中为一个点

例如，对球面遍历取边，获得到三条边，其中两条边分别为缝合边和退化边，`BRep_Tool::Curve(edge, first, last)`都会返回 `nullptr`。

## 数据结构

### 位掩码(Bit Mask)

位掩码，别称位字段(Bit field)，是一种高效的数据结构，核心思想是使用一个整数的每一位来表示不同的状态，从而在一个整数中存储多个布尔值。
位掩码一般与枚举搭配使用，具体进行操作时，只需要灵活使用位与 `&`、位或 `|`以及异或 `^`就能轻松实现状态的查询与设置。需要注意的是，状态枚举的设置与一般的设置存在一定区别，位掩码状态枚举需要手动指定状态值，如下所示：

```
enum Status {
STATUS_A = 1 << 0,  // 0001
STATUS_B = 1 << 1,  // 0010
STATUS_C = 1 << 2,  // 0100
STATUS_D = 1 << 3   // 1000
};
```

在 `Win C++`中，由于 `int`整型数只有32位，位掩码最多只能表达32种状态，就算换成 `long long`类型，最高可表达的状态也只能扩展到64位，一旦超过这个数量，就只能使用更加通用的数据结构进行解决。

### 八叉树(Octree)

八叉树用于3D空间中的快速查找，在很多情况下非常有用。

## 语言基础

### 关键字
- `constexpr`：constexpr是用于指示常量表达式的关键字，它的值在编译期间就已知，所有的constexpr对象都是`const`对象，但不是所有的const对象都是constexpr对象。constexpr还可用于函数，这样的函数在编译时就能计算出结果，只有在除了typedef和静态元素，只有return语句，并且参数和返回值必须是字面值类型的情况下，编译器才会接受constexpr函数。
- `noexcept`：noexcept是一个用于声明函数不应该抛出异常的关键字，用于编译器对该处进行优化，但其本身无法阻止异常的抛出，只用作标记，若函数仍抛出异常，那么程序就会调用`std::terminate()`终止，因为这不符合规定的正常运行流程。


### 基础重写
- 对于二元操作符`+`等的重写，一般使用的规则是`T operator+(T lhs, const T& rhs);`，这是因为操作符左侧往往是需要被修改的，如`a = a + b`或者`a += b`，这是一种公认的习惯，操作符左侧使用引用会导致值被修改两次，与期望不符。

### 智能指针
- `std::unique_ptr<T>`：所有权独占，所以访问时不能直接返回unique_ptr自身，一般用在类自身的指针成员变量上，即指针所指对象的生命周期与所属类相同，由于unique_ptr的存在，无需在析构函数中手动对改指针成员变量进行内存管理。
- `std::shared_ptr<T>`：待续
